name: Production Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun run test

      - name: Run type checking
        run: bun run typecheck

      - name: Build application
        run: bun run build

      - name: Make distributables
        run: bunx electron-forge make --platform ${{ matrix.platform }}

      - name: List build outputs (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "=== Build outputs ==="
          find out/make -type f | sort
          echo "=== File sizes ==="
          find out/make -type f -exec ls -lh {} \;

      - name: List build outputs (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          echo === Build outputs ===
          dir /s /b out\make
          echo === File details ===
          dir /s out\make

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-builds
          path: |
            out/make/squirrel.windows/**/*.exe
            out/make/squirrel.windows/**/*.nupkg
            out/make/squirrel.windows/**/RELEASES
          if-no-files-found: error
          retention-days: 30

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-builds
          path: |
            out/make/*.dmg
            out/make/zip/**/*.zip
            out/make/*.zip
          if-no-files-found: error
          retention-days: 30

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-builds
          path: |
            out/make/deb/**/*.deb
            out/make/rpm/**/*.rpm
            out/make/*.deb
            out/make/*.rpm
            out/make/*.AppImage
          if-no-files-found: error
          retention-days: 30

  release:
    name: Create Production Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: |
          echo "=== Artifact structure ==="
          find artifacts -type f \( -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.nupkg" -o -name "RELEASES" \) | sort

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Production Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Moi Dither ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Moi Dither ${{ steps.get_version.outputs.VERSION }}
            
            ### Downloads
            - **Windows:** Download the `.exe` file for the installer
            - **macOS:** Download the `.dmg` file for Intel/Apple Silicon
            - **Linux:** 
              - Debian/Ubuntu: Download the `.deb` file
              - Fedora/RHEL: Download the `.rpm` file
              - Universal: Download the `.AppImage` file
            
            ### Installation Instructions
            
            #### Windows
            1. Download the `.exe` file
            2. Run the installer and follow the prompts
            
            #### macOS
            1. Download the `.dmg` file
            2. Open the `.dmg` and drag Moi Dither to Applications
            
            #### Linux
            - **Debian/Ubuntu:** `sudo dpkg -i moi-dither_*.deb`
            - **Fedora/RHEL:** `sudo rpm -i moi-dither-*.rpm`
            - **AppImage:** Make executable with `chmod +x` and run
            
            ---
            
            ### What's Changed
            See the [full changelog](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }})
            
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.AppImage
            artifacts/**/*.nupkg
            artifacts/**/RELEASES
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}